/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */

/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) {
    const stack = [root];
    const arr = [];
    while (stack.length != 0) {
        const curr = stack.shift();
        if (curr) {
            arr.push(curr.val);
            stack.push(curr.left);
            stack.push(curr.right);
        } else {
            arr.push(null);
        }
    }
    return arr;
};

/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    const stack = [];
    let root;
    data.forEach((d,index) => {
        let node;
        if (typeof d != 'undefined' && d != null) {
           node = new TreeNode(d);
            stack.push(node);
        } else {
           node = null; 
        }
        if (!root) {
           root = node; 
        } else {
            const curr = stack[0];
            if (index%2 != 0) {
                curr.left = node;
            } else {
                curr.right = node;
                stack.shift();
            }
        } 
    });    
    return root;
};

/**
 * Your functions will be called as such:
 * deserialize(serialize(root));
 */
