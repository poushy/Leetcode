/**
 * @param {string} s
 * @param {number} k
 * @return {number}
 */
var longestSubstring = function(s, k) {
    const stringArr = s.split('');
    let maxLength = 0;
    const subStrings = []
    
    const findSub = (start, end) => {
        if (end - start < k - 1) {
            return;
        }
        const sub = stringArr.slice(start, end + 1);
        let stringMap = {};
        sub.forEach(str => {
            if(!stringMap[str]) {
                stringMap[str] = 0;
            }
            stringMap[str]++;
        });
        let rep = true;
        Object.keys(stringMap).forEach(key => {
            if (stringMap[key] < k) {
                rep = false;
               delete stringMap[key];
            }
        });
        if (!rep) {
            let beg = start;
            for (let i=start; i<= end; i++) {
                if (!stringMap[s[i]]) {
                    findSub(beg, i - 1);
                    beg = i + 1;
                } else if (i == end) {
                    findSub(beg, i);
                    beg = i + 1;
                }
            }
        } else {
            subStrings.push(sub.join(''));
            const len = sub.length;
            if (maxLength < len) {
                maxLength = len;
            }
        }
    }
    
    findSub(0,s.length - 1);
    return maxLength;
};
