/**
 * @param {string} s
 * @return {string}
 */

var longestPal = 0;
var longestPalString = '';

var testPal = function(s, startInd, endInd) {
    if(startInd === -1 || endInd === s.length) {
        return;
    }
    else {
        if(s[startInd] === s[endInd]) {
            testPal(s, startInd - 1, endInd + 1);
    
        
            if(longestPal < endInd - startInd + 1) {
                longestPal = endInd - startInd + 1;
                longestPalString = s.slice(startInd, endInd + 1);
            }
        }
    }
}
var longestPalindrome = function(s) {
    longestPal = 0;
    for(var ind = 0; ind< s.length ; ind++) {
        if(ind + 1 != s.length && s[ind] == s[ind + 1]) {
            testPal(s, ind, ind + 1);   
        }
        testPal(s, ind, ind);
    }
    return longestPalString;
    
};
